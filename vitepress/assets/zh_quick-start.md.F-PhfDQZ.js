import{g as i,c as a,a as e,af as t}from"./chunks/framework.Dt3jsjwq.js";const c=JSON.parse('{"title":"快速开始","description":"","frontmatter":{},"headers":[],"relativePath":"zh/quick-start.md","filePath":"zh/quick-start.md","lastUpdated":1759058244000}'),l={name:"zh/quick-start.md"};function n(p,s,d,h,k,o){return e(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h1><h2 id="先决条件" tabindex="-1">先决条件 <a class="header-anchor" href="#先决条件" aria-label="Permalink to &quot;先决条件&quot;">​</a></h2><ul><li>Node.js: ^20.19.0 或 &gt;=22.12.0</li><li>VitePress: ^1.6.3</li><li>React/ReactDOM（可选）: ^18.2.0</li><li>@vitejs/plugin-react-swc（可选）: ^3.9.0</li></ul><h2 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-7kB_z" id="tab-C0Fms-j" checked><label data-title="react" for="tab-C0Fms-j">react</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @docs-islands/vitepress</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @vitejs/plugin-react-swc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react-dom</span></span></code></pre></div></div></div><h2 id="配置-vitepress" tabindex="-1">配置 VitePress <a class="header-anchor" href="#配置-vitepress" aria-label="Permalink to &quot;配置 VitePress&quot;">​</a></h2><ol><li><p>在 <code>VitePress</code> 配置中集成 <code>UI</code> 框架编译支持：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-PcldN" id="tab-sSwlY1N" checked><label data-title="react" for="tab-sSwlY1N">react</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .vitepress/config.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vitepressReactRenderingStrategies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@docs-islands/vitepress/react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vitePressConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 你的 VitePress 配置...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 向 Vite 配置注入 React 渲染支持与构建期优化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitepressReactRenderingStrategies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vitePressConfig);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vitePressConfig;</span></span></code></pre></div></div></div></li><li><p>在主题增强中注册框架对应的客户端运行时：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-UPKWr" id="tab-3u_tfXQ" checked><label data-title="react" for="tab-3u_tfXQ">react</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .vitepress/theme/index.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultTheme </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress/theme&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reactClientIntegration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@docs-islands/vitepress/react/client&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Theme } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> theme</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Theme</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: DefaultTheme,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> enhanceApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactClientIntegration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> theme;</span></span></code></pre></div></div></div></li></ol><h2 id="在-markdown-中使用-ui-组件" tabindex="-1">在 Markdown 中使用 UI 组件 <a class="header-anchor" href="#在-markdown-中使用-ui-组件" aria-label="Permalink to &quot;在 Markdown 中使用 UI 组件&quot;">​</a></h2><ol><li><p>编写 <code>UI</code> 组件：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-2JjRn" id="tab-DY3lYOq" checked><label data-title="react" for="tab-DY3lYOq">react</label></div><div class="blocks"><div class="language-tsx vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// components/Landing.tsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useState } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Landing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello World&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div></li><li><p>在 <code>Markdown</code> 中导入 <code>UI</code> 组件并使用渲染指令：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-IQzEa" id="tab-tR4ahp3" checked><label data-title="react" for="tab-tR4ahp3">react</label></div><div class="blocks"><div class="language-md vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Landing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../components/Landing&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Landing</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ssr:only</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> spa:sr</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div></div></div></li></ol><h2 id="渲染指令与行为" tabindex="-1">渲染指令与行为 <a class="header-anchor" href="#渲染指令与行为" aria-label="Permalink to &quot;渲染指令与行为&quot;">​</a></h2><h3 id="指令一览" tabindex="-1">指令一览 <a class="header-anchor" href="#指令一览" aria-label="Permalink to &quot;指令一览&quot;">​</a></h3><ul><li><p><code>ssr:only</code>（默认）</p><ul><li>构建期完成预渲染，仅输出静态 <code>HTML</code>，不执行客户端 <code>Hydration</code>。</li><li>适合静态内容、<code>SEO</code> 关键内容，最利于 <code>FCP</code>/<code>LCP</code>/<code>SEO</code>，并避免增加客户端 <code>JS</code> 体积。</li></ul></li><li><p><code>client:load</code></p><ul><li>先预渲染 <code>HTML</code>，随后在客户端立即 <code>Hydration</code> 接管交互。</li><li>适合首屏关键且需要交互的组件，在弱网环境和低性能设备上以及渲染大型组件时对 TTI 可能存在一定压力。</li></ul></li><li><p><code>client:visible</code></p><ul><li>预渲染 <code>HTML</code>，组件进入用户可见视口后再完成 <code>Hydration</code> 工作。</li><li>适合非首屏交互组件（评论区、图表等），脚本默认预加载，非纯惰性。</li></ul></li><li><p><code>client:only</code></p><ul><li>仅客户端渲染，无服务器端预渲染。</li><li>适合强宿主依赖或非关键、轻量组件。</li></ul></li></ul><h3 id="指令速查表" tabindex="-1">指令速查表 <a class="header-anchor" href="#指令速查表" aria-label="Permalink to &quot;指令速查表&quot;">​</a></h3><table tabindex="0"><thead><tr><th>指令</th><th>是否预渲染 HTML</th><th>客户端 Hydration</th><th>触发时机</th><th>典型场景</th><th><code>spa:sr</code> 默认</th></tr></thead><tbody><tr><td><code>ssr:only</code></td><td>是</td><td>否</td><td>N/A</td><td>静态/SEO 关键内容</td><td>开启</td></tr><tr><td><code>client:load</code></td><td>是</td><td>立即</td><td>预加载模块，加载后即水合</td><td>首屏关键交互组件</td><td>关闭</td></tr><tr><td><code>client:visible</code></td><td>是</td><td>可见时</td><td>预加载；进入视口后水合</td><td>非首屏交互（评论、图表等）</td><td>关闭</td></tr><tr><td><code>client:only</code></td><td>否</td><td>否</td><td>仅客户端</td><td>强宿主依赖或轻量小部件</td><td>禁用</td></tr></tbody></table><h3 id="spa-同步渲染-spa-sync-render-spa-sr" tabindex="-1">SPA 同步渲染（<code>spa:sync-render</code> / <code>spa:sr</code>） <a class="header-anchor" href="#spa-同步渲染-spa-sync-render-spa-sr" aria-label="Permalink to &quot;SPA 同步渲染（\`spa:sync-render\` / \`spa:sr\`）&quot;">​</a></h3><p><code>VitePress</code> 在 <code>SPA</code> 路由切换时，<code>Vue</code> 内容同步更新；非 <code>Vue</code> 组件（如 <code>React</code>）的预渲染 <code>HTML</code> 与客户端脚本加载是异步的，在弱网环境和低性能设备上容易造成 <strong>闪烁</strong> 现象。<code>spa:sr</code> 通过将目标页面中使用该指令的组件的预渲染输出合并到 <code>Vue</code> 的客户端脚本，高优阻塞下载和解析所有使用 <code>spa:sr</code> 指令的组件的 <code>CSS</code> 模块，同步渲染来消除闪烁现象。</p><p>默认规则：</p><ul><li><code>client:only</code> 组件不支持 <code>spa:sr</code>。</li><li>使用 <code>client:*</code> 指令的组件默认不开启 <code>spa:sr</code>，除非显式(<code>spa:sr</code>/<code>spa:sync-render</code>)标注。</li><li>使用 <code>ssr:only</code> 的组件（以及无指令组件）默认开启 <code>spa:sr</code>，除非显式(<code>spa:sr:disable</code>/<code>spa:sync-render:disable</code>)标注。</li></ul><p>权衡：<code>spa:sr</code> 改善切页体验，但会增大切页加载的客户端脚本体积，建议对 <strong>关键渲染组件</strong> 启用。</p><p>示例：</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Landing</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> client:load</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> spa:sr</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Hero</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ssr:only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Chart</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> client:visible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Widget</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> client:only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>包体积提示：体积增加仅发生在 SPA 切页时加载的页面客户端脚本；不影响首屏使用的 <code>.lean.js</code>（VitePress 首次渲染用以水合的精简脚本）。</p><h2 id="约定事项" tabindex="-1">约定事项 <a class="header-anchor" href="#约定事项" aria-label="Permalink to &quot;约定事项&quot;">​</a></h2><ol><li><p><strong>组件标签命名</strong></p><ul><li>必须以大写字母开头（<code>PascalCase</code> 风格），例如 <code>MyComp</code>。</li><li>标签名必须与同一 <code>.md</code> 文件内 <code>&lt;script lang=&quot;react&quot;&gt;</code> 块中的本地导入名完全一致。如果使用了别名导入（如 <code>import { Landing as HomeLanding } from &#39;...&#39;;</code>），则标签必须写为 <code>&lt;HomeLanding ... /&gt;</code>。</li><li>任何不匹配情况都会在编译时跳过，并输出一条告警。</li></ul></li><li><p><strong>仅支持自闭合标签</strong></p><ul><li><code>Markdown</code> 中的 <code>React</code> 组件必须写成自闭合形式：<code>&lt;Comp ... /&gt;</code>。</li><li>非自闭合形式（如 <code>&lt;Comp&gt;...&lt;/Comp&gt;</code>）会被跳过并输出一条告警。</li></ul></li><li><p><strong>位置与导入</strong></p><ul><li>组件必须在同一 <code>Markdown</code> 页面内的 <code>&lt;script lang=&quot;react&quot;&gt;</code> 块中完成导入，未导入的组件会被忽略。</li><li>组件可以在 <code>Vue</code> 的插槽/模板中使用（例如在 <code>&lt;template #default&gt;...&lt;/template&gt;</code> 内部），也会被正确发现并转换。</li></ul></li><li><p><strong>Props 传递（初始化）</strong></p><ul><li>标签上的所有非策略属性会作为字符串 <code>props</code> 传递给 <code>React</code> 组件。<code>Vue</code> 绑定（如 <code>:page-title=&quot;page.title&quot;</code>）会先由 <code>Vue</code> 求值为 <code>DOM</code> 属性，再在 <code>React</code> 渲染/水合时转发为 <code>props</code>。这是一次性数据传递，非响应式。</li><li>不要通过属性传递函数或事件处理（如 <code>onClick</code>）；当前不支持跨框架桥接可调用的 <code>props</code>/事件。</li></ul></li><li><p><strong>支持的指令</strong></p><ul><li><code>client:only</code>、<code>client:load</code>、<code>client:visible</code>、<code>ssr:only</code>（默认）。</li><li><code>spa:sync-render</code>（即 <code>spa:sr</code>）对 <code>client:*</code>(<code>client:only</code> 不支持) 默认关闭，对 <code>ssr:only</code> 默认开启（除非显式 <code>spa:sync-render:disable</code>/<code>spa:sr:disable</code>）。</li></ul></li><li><p><strong><code>ssr:only</code> 使用 Node API 的约束</strong></p><ul><li>仅当组件在单个页面上“仅以 <code>ssr:only</code> 形式”渲染时，才能依赖 Node API（例如 <code>node:fs</code>）。若同一页面上该组件同时以任意 <code>client:*</code> 指令使用，则不得依赖 Node API。</li><li>使用 <code>node:fs</code> 等环境 API 读取本地文件时，请以 <code>import.meta.dirname</code> 作为基础路径来解析目标路径。</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readFileSync } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { join } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pathe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> targetPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;local-data.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(targetPath, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ol><blockquote><p><strong>约束：<code>&lt;script lang=&quot;react&quot;&gt;</code> 里仅支持静态 <code>ESM import</code>。初始渲染时的 <code>props</code> 为一次性快照，非响应式双向绑定（通过父级 <code>Vue</code> 传入的数据只用于初始化）。</strong></p></blockquote><h2 id="排错-faq" tabindex="-1">排错 / FAQ <a class="header-anchor" href="#排错-faq" aria-label="Permalink to &quot;排错 / FAQ&quot;">​</a></h2><ul><li>标签被忽略：确保标签以大写字母开头、名称与本地导入名完全一致，且 <code>React</code> 标签必须自闭合。</li><li>组件未渲染：组件必须在同一 <code>.md</code> 内的 <code>&lt;script lang=&quot;react&quot;&gt;</code> 完成导入，且不要放在围栏代码块中。</li><li>切页闪烁：对首屏关键组件启用 <code>spa:sr</code>。</li><li>水合报错：运行时会回退到客户端渲染；请确保服务端标记与客户端输出一致，避免通过属性传递函数。</li><li>Node API 使用报错：仅在该页面 <strong>纯 <code>ssr:only</code></strong> 渲染时使用，并通过 <code>import.meta.dirname</code> 解析路径。</li></ul>`,27)])])}const g=i(l,[["render",n]]);export{c as __pageData,g as default};
