import{g as i,c as e,a,af as t}from"./chunks/framework.BM6E3YfV.js";const k=JSON.parse('{"title":"Quick Start","description":"","frontmatter":{},"headers":[],"relativePath":"quick-start.md","filePath":"en/quick-start.md","lastUpdated":1758788785000}'),n={name:"quick-start.md"};function l(d,s,o,r,p,h){return a(),e("div",null,[...s[0]||(s[0]=[t(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /vitepress-rendering-strategies/quick-start.md for this page in Markdown format</div><h1 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">​</a></h1><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ul><li>Node.js: ^20.19.0 or &gt;=22.12.0</li><li>VitePress: ^1.6.3</li><li>React/ReactDOM (optional): ^18.2.0</li><li>@vitejs/plugin-react-swc (optional): ^3.9.0</li></ul><h2 id="install-dependencies" tabindex="-1">Install Dependencies <a class="header-anchor" href="#install-dependencies" aria-label="Permalink to &quot;Install Dependencies&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitepress-rendering-strategies</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @vitejs/plugin-react-swc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react-dom</span></span></code></pre></div><h2 id="configure-vitepress" tabindex="-1">Configure VitePress <a class="header-anchor" href="#configure-vitepress" aria-label="Permalink to &quot;Configure VitePress&quot;">​</a></h2><ol><li><p>Enable the <code>React</code> rendering strategies plugin in your <code>VitePress</code> config:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .vitepress/config.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vitepressReactRenderingStrategies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress-rendering-strategies/react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vitePressConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Setup VitePress config...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Inject React rendering support and build-time optimizations into Vite</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitepressReactRenderingStrategies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vitePressConfig);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vitePressConfig;</span></span></code></pre></div></li><li><p>Install the client runtime in theme enhancement:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .vitepress/theme/index.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultTheme </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress/theme&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reactClientIntegration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress-rendering-strategies/react/client&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Theme } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> theme</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Theme</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: DefaultTheme,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> enhanceApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactClientIntegration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> theme;</span></span></code></pre></div></li></ol><h2 id="using-react-components-in-markdown" tabindex="-1">Using React Components in Markdown <a class="header-anchor" href="#using-react-components-in-markdown" aria-label="Permalink to &quot;Using React Components in Markdown&quot;">​</a></h2><ol><li><p>Write React components:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// components/Landing.tsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useState } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Landing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello World&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Import <code>React</code> components in <code>Markdown</code> and apply directives:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;script lang=&quot;react&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  import Landing from &#39;../components/Landing&#39;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/script&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;Landing ssr:only spa:sr title=&quot;Hello&quot; /&gt;</span></span></code></pre></div></li></ol><h2 id="rendering-directives-and-behavior" tabindex="-1">Rendering Directives and Behavior <a class="header-anchor" href="#rendering-directives-and-behavior" aria-label="Permalink to &quot;Rendering Directives and Behavior&quot;">​</a></h2><h3 id="directive-overview" tabindex="-1">Directive Overview <a class="header-anchor" href="#directive-overview" aria-label="Permalink to &quot;Directive Overview&quot;">​</a></h3><ul><li><p><code>ssr:only</code> (default)</p><ul><li>Pre-render at build time and output static <code>HTML</code>; no client <code>Hydration</code>.</li><li>Best for static content and <code>SEO</code>‑critical sections; benefits <code>FCP</code>/<code>LCP</code>/<code>SEO</code> and avoids adding client‑side <code>JS</code> weight.</li></ul></li><li><p><code>client:load</code></p><ul><li>Pre-render <code>HTML</code> and immediately <code>Hydration</code> on the client to take over interactivity.</li><li>Suited for above‑the‑fold interactive components; can add pressure to TTI.</li></ul></li><li><p><code>client:visible</code></p><ul><li>Pre-render <code>HTML</code>; perform <code>Hydration</code> when the component becomes visible.</li><li>Suited for offscreen interactive components (comments, charts, etc.); scripts are preloaded by default (not pure lazy).</li></ul></li><li><p><code>client:only</code></p><ul><li>Client‑side rendering only; no SSR/SSG pre-rendering.</li><li>Suited for strong host‑environment dependencies or non‑critical, lightweight widgets.</li></ul></li></ul><h3 id="directives-quick-reference" tabindex="-1">Directives quick reference <a class="header-anchor" href="#directives-quick-reference" aria-label="Permalink to &quot;Directives quick reference&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Directive</th><th>Pre-render HTML</th><th>Client Hydration</th><th>Load timing</th><th>Typical usage</th><th><code>spa:sr</code> default</th></tr></thead><tbody><tr><td><code>ssr:only</code></td><td>Yes</td><td>No</td><td>N/A</td><td>Static/SEO‑critical sections</td><td>Enabled</td></tr><tr><td><code>client:load</code></td><td>Yes</td><td>Immediate</td><td>Preload module, hydrate on load</td><td>Above‑the‑fold interactive components</td><td>Disabled</td></tr><tr><td><code>client:visible</code></td><td>Yes</td><td>On visible</td><td>Preload; hydrate on intersection</td><td>Offscreen interactions (comments/charts)</td><td>Disabled</td></tr><tr><td><code>client:only</code></td><td>No</td><td>N/A</td><td>Client‑only</td><td>Host‑dependent/lightweight widgets</td><td>Disabled</td></tr></tbody></table><h3 id="spa-synchronous-rendering-spa-sync-render-spa-sr" tabindex="-1">SPA Synchronous Rendering (<code>spa:sync-render</code> / <code>spa:sr</code>) <a class="header-anchor" href="#spa-synchronous-rendering-spa-sync-render-spa-sr" aria-label="Permalink to &quot;SPA Synchronous Rendering (\`spa:sync-render\` / \`spa:sr\`)&quot;">​</a></h3><p>During <code>SPA</code> navigations in <code>VitePress</code>, <code>Vue</code> content updates synchronously; however, pre-rendered <code>HTML</code> for non‑<code>Vue</code> components (e.g., <code>React</code>) and their scripts load asynchronously, which can easily cause <strong>flicker</strong> on weak networks and low-performance devices. <code>spa:sr</code> merges the pre-rendered output of components marked with this directive into the <code>Vue</code> client script, prioritizes blocking download and parsing of all <code>CSS</code> modules for components using the <code>spa:sr</code> directive, and renders synchronously to eliminate flicker.</p><p>Default rules:</p><ul><li><code>client:only</code> components do not support <code>spa:sr</code>.</li><li>Components using <code>client:*</code> do not enable <code>spa:sr</code> by default; explicitly add (<code>spa:sr</code>/<code>spa:sync-render</code>) to enable.</li><li>Components using <code>ssr:only</code> (and components without any directive) enable <code>spa:sr</code> by default unless explicitly disabled via (<code>spa:sr:disable</code>/<code>spa:sync-render:disable</code>).</li></ul><p>Trade‑off: <code>spa:sr</code> improves navigation smoothness but increases client script size during navigations. Prefer enabling it only for <strong>critical rendering components</strong>.</p><p>Example:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;Landing client:load spa:sr title=&quot;Home&quot; /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;Hero ssr:only /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;Chart client:visible /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;Widget client:only /&gt;</span></span></code></pre></div><p>Bundle size note: the size increase applies only to page client scripts loaded during SPA navigations, and does not affect the initial <code>.lean.js</code> used for first‑load hydration in VitePress.</p><h2 id="usage-notes" tabindex="-1">Usage Notes <a class="header-anchor" href="#usage-notes" aria-label="Permalink to &quot;Usage Notes&quot;">​</a></h2><ol><li><p><strong>Component tag naming</strong></p><ul><li>Must start with an uppercase letter (PascalCase style), e.g. <code>MyComp</code>.</li><li>The tag name must exactly match the locally imported name in the same <code>.md</code> file’s <code>&lt;script lang=&quot;react&quot;&gt;</code> block. If you alias like <code>import { Landing as HomeLanding } from &#39;...&#39;;</code>, then the tag must be <code>&lt;HomeLanding ... /&gt;</code>.</li><li>Any mismatch will be skipped at compile time with a warning.</li></ul></li><li><p><strong>Self-closing only</strong></p><ul><li><code>React</code> components in <code>Markdown</code> must be self-closing: <code>&lt;Comp ... /&gt;</code>.</li><li>Non‑self‑closing forms like <code>&lt;Comp&gt;...&lt;/Comp&gt;</code> are skipped with a warning.</li></ul></li><li><p><strong>Location and imports</strong></p><ul><li>Components must be imported in the same <code>Markdown</code> page inside a <code>&lt;script lang=&quot;react&quot;&gt;</code> block. Unimported components are ignored.</li><li>Components can be used inside <code>Vue</code> slots/templates (e.g. within <code>&lt;template #default&gt;...&lt;/template&gt;</code>); they will still be correctly discovered and transformed.</li></ul></li><li><p><strong>Props passing (initialization)</strong></p><ul><li>All non‑strategy attributes on the tag are passed to the <code>React</code> component as string props. <code>Vue</code> bindings like <code>:page-title=&quot;page.title&quot;</code> are evaluated by <code>Vue</code> first and written as <code>DOM</code> attributes, then forwarded as props during <code>React</code> render/hydration. This is a one‑time data pass, not reactive.</li><li>Do not pass functions or event handlers via attributes (e.g. <code>onClick</code>); bridging callable props/events across frameworks is not supported.</li></ul></li><li><p><strong>Supported directives</strong></p><ul><li><code>client:only</code>, <code>client:load</code>, <code>client:visible</code>, <code>ssr:only</code> (default).</li><li><code>spa:sync-render</code> (aka <code>spa:sr</code>) is disabled by default for <code>client:*</code> and enabled by default for <code>ssr:only</code> unless explicitly disabled via <code>spa:sync-render:disable</code> / <code>spa:sr:disable</code>.</li></ul></li><li><p><strong>Constraints for Using Node APIs with <code>ssr:only</code></strong></p><ul><li>A component can only rely on Node APIs (e.g., <code>node:fs</code>) if it is rendered <em>exclusively</em> with the <code>ssr:only</code> directive on a given page. If the same component is also used with any <code>client:*</code> directive on the same page, it must not depend on Node APIs.</li><li>When using environment APIs like <code>node:fs</code> to read local files, use <code>import.meta.dirname</code> as the base path to resolve the target path.</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readFileSync } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { join } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pathe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> targetPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;local-data.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(targetPath, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ol><blockquote><p><strong>Constraint: only static <code>ESM import</code> is supported inside <code>&lt;script lang=&quot;react&quot;&gt;</code>. During the initial render, <code>props</code> are a one‑off snapshot, not a reactive binding (values passed from the parent <code>Vue</code> component are used for initialization only).</strong></p></blockquote><h2 id="troubleshooting-faq" tabindex="-1">Troubleshooting (FAQ) <a class="header-anchor" href="#troubleshooting-faq" aria-label="Permalink to &quot;Troubleshooting (FAQ)&quot;">​</a></h2><ul><li>Tags are ignored: ensure the tag starts with an uppercase letter and exactly matches the local import name; React tags must be self‑closing.</li><li>Nothing renders: the component must be imported in the same <code>.md</code> inside <code>&lt;script lang=&quot;react&quot;&gt;</code> and used outside fenced code blocks.</li><li>Flicker on navigation: enable <code>spa:sr</code> for components critical to above‑the‑fold rendering.</li><li>Hydration errors: the runtime falls back to client rendering; verify that server‑rendered markup matches client output and avoid passing functions as attributes.</li><li>Node API usage errors: only use Node APIs when the component is rendered exclusively with <strong><code>ssr:only</code></strong> on that page and resolve paths with <code>import.meta.dirname</code>.</li></ul>`,28)])])}const g=i(n,[["render",l]]);export{k as __pageData,g as default};
